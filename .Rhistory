plot <- plot + theme(plot.background = element_rect(fill = "white"))
plot <- plot + theme(panel.background = element_rect(fill = "gold1"))
# format plot/panel backgrounds
plot
}
age_change()
roxygenise(getwd())
devtools::test(pkg = getwd())
devtools::test(pkg = getwd())
devtools::test(pkg = getwd())
roxygenise(getwd())
roxygenise(getwd())
formatR::tidy_dir("R")
formatR::tidy_dir("tests")
formatR::tidy_dir("tests/testthat")
avg_age(2004)
avg_age(2005)
avg_age(2006)
avg_age(2007)
avg_age(2008)
avg_age(2009)
avg_Age(2010)
avg_age(2010)
avg_age(2011)
avg_1ge(2012)
avg_age(2012)
avg_age(2013)
avg_age(2014)
oldst(2004)
oldst(2005)
oldst(2006)
oldst(2007)
oldst(2008)
oldst(2009)
oldst(2010)
oldst(2011)
oldst(2012)
oldst(2013)
oldst(2014)
yngst(2004)
yngst(2005)
yngst(2006)
yngst(2007)
yngst(2008)
yngst(2009)
yngst(2010)
yngst(2011)
yngst(2012)
yngst(2013)
yngst(2014)
devtools::check(getwd())
/private/var/folders/7m/1kr2x6g117bf91p04nx69td80000gn/T/Rtmp5RVmHy/avages.Rcheck/00check.log
devtools::check(getwd())
load_all(getwd())
devtools::check(getwd())
load_all(getwd())
devtools::check(getwd())
devtools::check(pkg = getwd())
#' Change in mean age of professors at Williams College from 2004 to 2014
#'
#' Returns a graphical representation of the change in mean age of professors at Williams College from 2004 to 2014
#'
age_change <- function() {
ages1 <- c(avg_age(2004), avg_age(2005), avg_age(2006), avg_age(2007), avg_age(2008),
avg_age(2009), avg_age(2010), avg_age(2011), avg_age(2012), avg_age(2013), avg_age(2014))
# generate mean ages as y values
years1 <- 2004:2014
# generate x values
profdata <- data.frame(years1, ages1)
# create a data frame
library(ggplot2, warn.conflicts = FALSE, quietly = TRUE)
plot <- ggplot(profdata, aes(years1, ages1)) + geom_point(color = "darkviolet")
plot <- plot + ggtitle("Change in Mean Age from 2004 to 2014")
plot <- plot + theme(plot.title = element_text(size = 15, face = "bold", vjust = 1,
hjust = 0.5))
# title graph
plot <- plot + labs(x = "Year", y = "Age (yrs)")
# label axes
plot <- plot + theme(axis.text.x = element_text(angle = 50, size = 10, face = "bold",
color = "darkviolet"))
plot <- plot + theme(axis.title.x = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
# format x axis
plot <- plot + theme(axis.text.y = element_text(size = 10, face = "bold", color = "darkviolet"))
plot <- plot + theme(axis.title.y = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
plot <- plot + ylim(c(0, 60))
# format y axis
plot <- plot + theme(plot.background = element_rect(fill = "white"))
plot <- plot + theme(panel.background = element_rect(fill = "gold1"))
# format plot/panel backgrounds
plot
}
age_change()
#' Change in mean age of professors at Williams College from 2004 to 2014
#'
#' Returns a graphical representation of the change in mean age of professors at Williams College from 2004 to 2014
#'
age_change <- function() {
ages1 <- c(avg_age(2004), avg_age(2005), avg_age(2006), avg_age(2007), avg_age(2008),
avg_age(2009), avg_age(2010), avg_age(2011), avg_age(2012), avg_age(2013), avg_age(2014))
# generate mean ages as y values
years1 <- 2004:2014
# generate x values
profdata <- data.frame(years1, ages1)
# create a data frame
library(ggplot2, warn.conflicts = FALSE, quietly = TRUE)
plot <- ggplot(profdata, aes(years1, ages1)) + geom_point(color = "darkviolet")
plot <- plot + ggtitle("Change in Mean Age from 2004 to 2014")
plot <- plot + theme(plot.title = element_text(size = 16, face = "bold", vjust = 1,
hjust = 0.5))
# title graph
plot <- plot + labs(x = "Year", y = "Age (yrs)")
# label axes
plot <- plot + theme(axis.text.x = element_text(angle = 50, size = 10, face = "bold",
color = "darkviolet"))
plot <- plot + theme(axis.title.x = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
# format x axis
plot <- plot + theme(axis.text.y = element_text(size = 10, face = "bold", color = "darkviolet"))
plot <- plot + theme(axis.title.y = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
plot <- plot + ylim(c(0, 60))
# format y axis
plot <- plot + theme(plot.background = element_rect(fill = "white"))
plot <- plot + theme(panel.background = element_rect(fill = "gold1"))
# format plot/panel backgrounds
plot
}
age_change()
#' Change in mean age of professors at Williams College from 2004 to 2014
#'
#' Returns a graphical representation of the change in mean age of professors at Williams College from 2004 to 2014
#'
age_change <- function() {
ages1 <- c(avg_age(2004), avg_age(2005), avg_age(2006), avg_age(2007), avg_age(2008),
avg_age(2009), avg_age(2010), avg_age(2011), avg_age(2012), avg_age(2013), avg_age(2014))
# generate mean ages as y values
years1 <- 2004:2014
# generate x values
profdata <- data.frame(years1, ages1)
# create a data frame
library(ggplot2, warn.conflicts = FALSE, quietly = TRUE)
plot <- ggplot(profdata, aes(years1, ages1)) + geom_point(color = "darkviolet")
plot <- plot + ggtitle("Change in Mean Age from 2004 to 2014")
plot <- plot + theme(plot.title = element_text(size = 17.5, face = "bold", vjust = 1,
hjust = 0.5))
# title graph
plot <- plot + labs(x = "Year", y = "Age (yrs)")
# label axes
plot <- plot + theme(axis.text.x = element_text(angle = 50, size = 10, face = "bold",
color = "darkviolet"))
plot <- plot + theme(axis.title.x = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
# format x axis
plot <- plot + theme(axis.text.y = element_text(size = 10, face = "bold", color = "darkviolet"))
plot <- plot + theme(axis.title.y = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
plot <- plot + ylim(c(0, 60))
# format y axis
plot <- plot + theme(plot.background = element_rect(fill = "white"))
plot <- plot + theme(panel.background = element_rect(fill = "gold1"))
# format plot/panel backgrounds
plot
}
age_change()
#' Change in mean age of professors at Williams College from 2004 to 2014
#'
#' Returns a graphical representation of the change in mean age of professors at Williams College from 2004 to 2014
#'
age_change <- function() {
ages1 <- c(avg_age(2004), avg_age(2005), avg_age(2006), avg_age(2007), avg_age(2008),
avg_age(2009), avg_age(2010), avg_age(2011), avg_age(2012), avg_age(2013), avg_age(2014))
# generate mean ages as y values
years1 <- 2004:2014
# generate x values
profdata <- data.frame(years1, ages1)
# create a data frame
library(ggplot2, warn.conflicts = FALSE, quietly = TRUE)
plot <- ggplot(profdata, aes(years1, ages1)) + geom_point(color = "darkviolet")
plot <- plot + ggtitle("Mean Age from 2004 to 2014")
plot <- plot + theme(plot.title = element_text(size = 17.5, face = "bold", vjust = 1,
hjust = 0.5))
# title graph
plot <- plot + labs(x = "Year", y = "Age (yrs)")
# label axes
plot <- plot + theme(axis.text.x = element_text(angle = 50, size = 10, face = "bold",
color = "darkviolet"))
plot <- plot + theme(axis.title.x = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
# format x axis
plot <- plot + theme(axis.text.y = element_text(size = 10, face = "bold", color = "darkviolet"))
plot <- plot + theme(axis.title.y = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
plot <- plot + ylim(c(0, 60))
# format y axis
plot <- plot + theme(plot.background = element_rect(fill = "white"))
plot <- plot + theme(panel.background = element_rect(fill = "gold1"))
# format plot/panel backgrounds
plot
}
age_change()
yngst(2004)
yngst(2005)
yngst(2006)
yngst(2007)
yngst(2008)
yngst(2009)
#' Youngest professor at Williams College
#'
#' Returns the name(s) and age(s) of the youngest professor(s) at Williams college in a year from 2004 to 2014.
#'
#' For this to work properly, argument must be an integer representing a year from 2004 to 2014.
#'
#'@param \code{x} An integer on [2004, 2014]
#'
yngst <- function(x) {
if (x == 2013) {
paste("Daniel Greenberg, age", min(ages_1(x)))
} else if (x == 2012) {
paste("Daniel Greenberg, age", min(ages_1(x)))
} else if (x == 2011) {
paste("Daniel Greenberg age", min(ages_1(x)))
} else if (x == 2010) {
paste("Donald Brooks, Marshall K. Creighton, and Christopher Himes, age", min(ages_1(x)))
} else if (x == 2009) {
paste("Nicholas T. Goodbody and Karen Russell, age", min(ages_1(x)))
} else if (x == 2008) {
paste("Charles N. Howard, age", min(ages_1(x)))
} else if (x == 2007) {
paste("Robert Michelin, age", min(ages_1(x)))
} else if (x == 2006) {
paste("Zafrir Levy, age", min(ages_1(x)))
} else if (x == 2005) {
paste("Zafrir Levy, age", min(ages_1(x)))
} else if (x == 2004) {
paste("Zafrir Levy, age", min(ages_1(x)))
} else if (x == 2014) {
paste("Sarah A. Mirseyedi, age", min(ages_2(x)))
} else {
stop("argument not an integer on [2004, 2014]")
}
}
yngst(2009)
yngst(2010)
yngst(2011)
yngst(2012)
yngst(2013)
yngst(2014)
oldst(2014)
oldst(2013)
oldst(2004)
oldst(2014)
ages_1 <- function(x) {
if (x == 2013) {
prof_info <- system.file("extdata", "2013williamsprofs.txt", package = "avages")
}
else if (x == 2012) {
prof_info <- system.file("extdata", "2012williamsprofs.txt", package = "avages")
}
else if (x == 2011) {
prof_info <- system.file("extdata", "2011williamsprofs.txt", package = "avages")
}
else if (x == 2010) {
prof_info <- system.file("extdata", "2010williamsprofs.txt", package = "avages")
}
else if (x == 2009) {
prof_info <- system.file("extdata", "2009williamsprofs.txt", package = "avages")
}
else if (x == 2008) {
prof_info <- system.file("extdata", "2008williamsprofs.txt", package = "avages")
}
else if (x == 2007) {
prof_info <- system.file("extdata", "2007williamsprofs.txt", package = "avages")
}
else if (x == 2006) {
prof_info <- system.file("extdata", "2006williamsprofs.txt", package = "avages")
}
else if (x == 2005) {
prof_info <- system.file("extdata", "2005williamsprofs.txt", package = "avages")
}
else if (x == 2004) {
prof_info <- system.file("extdata", "2004williamsprofs.txt", package = "avages")
}
else {
stop('argument not an integer on [2004, 2014]')
}
prof_info_charvec <- scan(prof_info, what = "character", quiet = TRUE)
#transform plain text document with 2013 prof info into a vector of strings
prof_info_charvec1 <- prof_info_charvec[!grepl("M.B.A.", prof_info_charvec, fixed = TRUE)]
#only want to estimate ages with undergrad degrees; can't have MBA interfering with BA
prof_info_charvec2 <- prof_info_charvec1[!grepl("A.B.D.", prof_info_charvec1, fixed = TRUE)]
#only want to estimate ages with undergrad degrees; can't have ABD interfering with AB
pos_of_BA <- grep("B.A.", prof_info_charvec2, fixed = TRUE)
pos_of_BA_dates <- pos_of_BA + 1
pos_of_BS <- grep("B.S.", prof_info_charvec2, fixed = TRUE)
pos_of_BS_dates <- pos_of_BS + 1
pos_of_BM <- grep("B.M.", prof_info_charvec2, fixed = TRUE)
pos_of_BM_dates <- pos_of_BM + 1
pos_of_BE <- grep("B.E.", prof_info_charvec2, fixed = TRUE)
pos_of_BE_dates <- pos_of_BE + 1
pos_of_AB <- grep("A.B.", prof_info_charvec2, fixed = TRUE)
pos_of_AB_dates <- pos_of_AB + 1
pos_of_BFA <- grep("—B.F.A.", prof_info_charvec2, fixed = TRUE)
pos_of_BFA_dates <- pos_of_BFA + 1
pos_of_BPhil <- grep("B.Phil", prof_info_charvec2, fixed = TRUE)
pos_of_BPhil_dates <- pos_of_BPhil + 1
pos_of_SB <- grep("S.B.", prof_info_charvec2, fixed = TRUE)
pos_of_SB_dates <- pos_of_SB + 1
pos_undergrad_dates <- c(pos_of_BA_dates, pos_of_BS_dates, pos_of_BM_dates, pos_of_BE_dates, pos_of_AB_dates, pos_of_BFA_dates, pos_of_BPhil_dates, pos_of_SB_dates)
#dates that undergrad degrees were receieved always appear 1 word after degree titles in Williams catalogue
years_charvec <- gsub("(", "", prof_info_charvec2[pos_undergrad_dates],
fixed = TRUE)
years_charvec1 <- gsub(")", "", years_charvec, fixed = TRUE)
# get rid of parentheses around years so they can be converted from strings to integers
years_charvec2 <- years_charvec1[!grepl("[a-z]", years_charvec1)]
# gets rid of any words that may have slipped through
years_charvec3 <- gsub("203", "2003", years_charvec2, fixed = TRUE)
# because Williams 2012-2013 catalogue accidentally reports that A. Levitt received B.F.A in 202 rather than 2003
years_charvec4 <- gsub("2022", "2002", years_charvec3, fixed = TRUE)
# because Williams 2011-2012 catalogue accidentally reports that J. Joosten received BA in 2022 rather than 2002
years_numvec <- strtoi(years_charvec4)
# converts vector of strings into integers so that math can be done
ages <- x - years_numvec + 22
}
ages_2 <- function(x) {
prof_info <- system.file("extdata", "2014williamsprofs.txt", package = "avages")
prof_info_charvec <- scan(prof_info, what = "character", quiet = TRUE)
#transform plain text document with 2014 prof info into a vector of strings
prof_info_charvec1 <- prof_info_charvec[!grepl("MBA", prof_info_charvec, fixed = TRUE)]
#only want to estimate ages with undergrad degrees; can't have MBA interfering with BA
prof_info_charvec2 <- prof_info_charvec1[!grepl("ABD", prof_info_charvec1, fixed = TRUE)]
#only want to estimate ages with undergrad degrees; can't have ABD interfering with AB
pos_of_BA <- grep("BA", prof_info_charvec2, fixed = TRUE)
pos_of_BA_dates <- pos_of_BA - 1
pos_of_BS <- grep("BS", prof_info_charvec2, fixed = TRUE)
pos_of_BS_dates <- pos_of_BS - 1
pos_of_BM <- grep("BM", prof_info_charvec2, fixed = TRUE)
pos_of_BM_dates <- pos_of_BM - 1
pos_of_BE <- grep("BE", prof_info_charvec2, fixed = TRUE)
pos_of_BE_dates <- pos_of_BE - 1
pos_of_AB <- grep("AB", prof_info_charvec2, fixed = TRUE)
pos_of_AB_dates <- pos_of_AB - 1
pos_of_BFA <- grep("BFA", prof_info_charvec2, fixed = TRUE)
pos_of_BFA_dates <- pos_of_BFA - 1
pos_of_BPhil <- grep("BPhil", prof_info_charvec2, fixed = TRUE)
pos_of_BPhil_dates <- pos_of_BPhil - 1
pos_of_SB <- grep("SB", prof_info_charvec2, fixed = TRUE)
pos_of_SB_dates <- pos_of_SB + 1
pos_undergrad_dates <- c(pos_of_BA_dates, pos_of_BS_dates, pos_of_BM_dates, pos_of_BE_dates, pos_of_AB_dates, pos_of_BFA_dates, pos_of_BPhil_dates, pos_of_SB_dates)
# dates of undergrad degrees always appear one word before degree title in Williams catalogue
years_charvec <- gsub(",", "", prof_info_charvec2[pos_undergrad_dates])
# get rid of commas after years so vector can be converted from strings to integers
years_numvec <- strtoi(years_charvec)
# converts vector of strings into integers so math can be done
ages <- x - years_numvec + 22
}
avg_age <- function(x) {
if (x == 2004 || x == 2005 || x == 2006 || x == 2007 || x == 2008 || x == 2009 || x == 2010 || x == 2011 || x == 2012 || x == 2013) {
mean(ages_1(x))
}
else if (x == 2014) {
mean(ages_2(x))
}
else {
stop('argument not an integer on [2004, 2014]')
}
}
age_change <- function() {
ages1 <- c(avg_age(2004), avg_age(2005), avg_age(2006), avg_age(2007), avg_age(2008), avg_age(2009), avg_age(2010), avg_age(2011), avg_age(2012), avg_age(2013), avg_age(2014))
# generate mean ages as y values
years1 <- 2004:2014
# generate x values
profdata <- data.frame(years1, ages1)
# create a data frame
library(ggplot2, warn.conflicts = FALSE, quietly = TRUE)
plot <- ggplot(profdata, aes(years1, ages1)) + geom_point(color="darkviolet")
plot <- plot + ggtitle("Mean Age from 2004 to 2014")
plot <- plot + theme(plot.title = element_text(size = 17.5, face = "bold", vjust = 1, hjust = 0.5))
#title graph
plot <- plot + labs(x="Year", y="Age (yrs)")
# label axes
plot <- plot + theme(axis.text.x = element_text(angle = 50, size = 10, face = "bold", color = "darkviolet"))
plot <- plot + theme(axis.title.x = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
# format x axis
plot <- plot + theme(axis.text.y = element_text(size = 10, face = "bold", color = "darkviolet"))
plot <- plot + theme(axis.title.y = element_text(face = "bold", hjust = 0.5, vjust = 0.8))
plot <- plot + ylim(c(0, 60))
# format y axis
plot <- plot + theme(plot.background = element_rect(fill = "white"))
plot <- plot + theme(panel.background = element_rect(fill = "gold1"))
# format plot/panel backgrounds
plot
}
plot
age_change()
plot
roxygenise(getwd())
roxygen2::roxygenise(getwd())
devtools::test(getwd())
devtools::test(getwd())
devtools::check(pkg = getwd())
help(age_hist)
roxygen2::roxygenise(getwd())
load_all(getwd())
devtools::load_all(getwd())
help(avg_age)
devtools::check(getwd())
roxygen2::roxygenise(getwd())
devtools::load_all(getwd())
devtools::check(getwd())
roxygen2::roxygenise(getwd())
devtools::check(getwd())
hwlp(gsub)
help(gsub)
help(source.file)
help(system.file)
roxygen2::roxygenise(getwd())
devtools::load_all(getwd())
help(avg_age)
devtools::check(getwd())
devtools::load_all(getwd())
devtools::build(getwd())
library(devtools)
help(build_vignettes)
build_vignettes(getwd())
devtools::use_vignette("avages-package")
rmarkdown::render("using-avages.Rmd")
setwd("~/avages/vignettes")
rmarkdown::render("using-avages.Rmd")
setwd("~/avages/inst/doc")
rmarkdown::render("using-avages.Rmd")
rmarkdown::render("using-avages.Rmd", output_format="all")
setwd("~/avages/vignettes")
rmarkdown::render("using-avages.Rmd", output_format="all")
rmarkdown::render("using-avages.Rmd")
rmarkdown::render("using-avages.Rmd")
rmarkdown::render("using-avages.Rmd")
setwd("~/avages")
devtools::load_all(getwd())
help(avg_age)
help(avages)
library(help = "getwd()")
library(help = "avages")
library(help = "devtools")
library(help = "avages")
devtools::install_github("tannermlove/avages", build_vignettes = TRUE)
library(avages)
help(avg_age)
devtools::use_vignette("my-vignette")
devtools::install_github("tannermlove/avages", build_vignettes = TRUE)
library(avages)
help(avg_age)
help(avg_age)
devtools::install_github("tannermlove/avages", build_vignettes = TRUE)
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
help(avg_age)
help(age_change)
age_change()
setwd("~/avages/vignettes")
rmarkdown::render(getwd())
rmarkdown::render("using-avages.Rmd")
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
avg_age(2012)
help(avg_age)
avg_age(2010)
help(yngst)
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
avg_age(2010)
help(avg_age)
help(yngst)
help(avg_age, package = "avages")
avg_age(2007)
setwd("~/avages")
devtools::load_all(getwd())
help(avg_age)
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
help(avg_age)
help(age_change)
avg_age(2001)
library(devtools)
help(install_github)
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
help(age_change)
help(avg_age)
browseVignettes("devtools")
library(devtools)
browseVignettes("MyPackage")
browseVignettes("devtools")
browseVignettes("avages")
devtools::build(getwd())
library(avages)
browseVignettes("avages")
devtools::build(getwd(), vignettes = TRUE)
browseVignettes("avages")
setwd("~/avages/vignettes")
rmarkdown::render("using-avages.Rmd")
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
avg_age(2010)
help(avg_age)
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
avg_age()
help(avg_age)
devtools::use_vignette("my-vignette")
setwd("~/avages/inst/doc")
rmarkdown::render("using-avages.Rmd")
library(rmarkdown)
help(render)
render("using-avages.Rmd", "html_document")
devtools::install_github("tannermlove/avages", build_vignettes = TRUE, force = TRUE)
library(avages)
help(avg_age)
